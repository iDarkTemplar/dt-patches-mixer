# Possible options:
# 1) DIR=directory
# 2) REPO=name URL branch [ branch2 ... ] [ gpg=/path/to/gpg/homedir/with/keys ]
# 3) MERGE_METHOD=method
#	currently supported methods are:
#	- merge
#		just plain git-merge merge directories with each other. If merge fails, script aborts
#	- read-tree
#		a bit more tricky method which allows to checkout only subdirectories of repositories
#		reads tree and overwrites previous contents if needed.
#		if this method is used, then branch in REPO may contain subdirectory, like: master:path/to/subdirectory
# 4) MERGE_CONFLICTS=options
#	it takes options, like --strategy= and --strategy-options= and passes it to git merge
# 5) VERBOSE=verbosity
#	it takes either 0 or 1 as parameter. 1 means verbose, 0 means silent
#
# All options except for REPO are allowed only once
# but order may be important: in case of merge issues, MERGE_CONFLICTS options are applied, and if merge fails, resulting state is the state of repository before failed merge although a bit cleaned up
# NOTE: it is still possible to merge first branch branch_A1 from repo A, then branch branch_B1 from repo B and then branch branch_A2 from repo A. For that purpose, you need to list repo A twice with different repo names, like in following example:
#REPO=A url://A/ branch_A1
#REPO=B url://B/ branch_B1
#REPO=A_again url://A/ branch_A2
# If gpg=/somepath option is specified, then specified path must be a gpg home dir containing keys which are used to sign commits in destination repository.
# Commit from specified branch would be checked, and if verification fails, merge would fail

MERGE_METHOD=read-tree
MERGE_CONFLICTS=--strategy=recursive --strategy-option=ours
DIR=/var/lib/dt-patches-mixer
VERBOSE=0

REPO=dt-overlay-patches          https://github.com/iDarkTemplar/dt-overlay-patches.git          master:profiles/patches gpg=/etc/keys/dt-overlay-patches
#REPO=dt-overlay-crossdev-freebsd https://github.com/iDarkTemplar/dt-overlay-crossdev-freebsd.git master:profiles/patches
